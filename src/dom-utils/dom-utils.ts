/* eslint-disable no-console */
import { JSDOM } from "jsdom";
import {
    findElementsWithMatcher,
    findNextSiblingWithContent,
    findPriorSiblingWithContent,
    toBase64,
} from "./utils";

/** Extracts the link URL from Google Docs links
 *
 * Links from the HTML generated by google docs use the format `https://google.com/url?q=<your link>&...`
 *
 * The link you actually want is in the `q` query parameter
 *
 * If `docsHref` does not exist or is not a valid URL, this will return the input value unchanged.
 *
 * @param {string} docsHref The URL from the Google Doc Link href
 * @returns {string}
 */
export const extractLinkUrl = (docsHref = ""): string => {
    try {
        const urlObj = new URL(docsHref);
        const redirectUrl = urlObj.searchParams.get("q");
        return redirectUrl ?? docsHref;
    } catch (err) {
        return docsHref;
    }
};

/** Replaces link hrefs from google docs with the correct url */
export const replaceGoogleHrefs = (dom: JSDOM): void => {
    const linkElements = dom.window.document.querySelectorAll("a");
    linkElements.forEach((a) => a.href && (a.href = extractLinkUrl(a.href)));
};

/** Removes inline styles applied to elements in exported Google Docs
 * @param {JSDOM} dom JSDOM instance
 * @returns {void}
 */
export const removeDocumentStyles = (dom: JSDOM): void => {
    dom.window.document
        .querySelectorAll("*")
        .forEach((element) => element.removeAttribute("style"));
};

/** Removes any links or spans with no content */
export const removeEmptySpans = (dom: JSDOM): void => {
    dom.window.document
        .querySelectorAll("a, div, p, span")
        .forEach(
            (span) =>
                !span.textContent?.trim() &&
                !span.querySelector("img") &&
                span.remove(),
        );
};

/** Sets every image's referrerpolicy to 'no-referrer'
 *
 * Helps prevent 403 errors when loading images from Google
 *
 * @see https://stackoverflow.com/questions/56242788/http-403-on-images-loaded-from-googleusercontent-com
 */
export const removeImageReferrer = (dom: JSDOM): void => {
    dom.window.document
        .querySelectorAll("img")
        .forEach((img) => img.setAttribute("referrerpolicy", "no-referrer"));
};

/** Extracts only the contents of the JSDOM's body tag */
export const extractDocumentHtml = (dom: JSDOM): string => {
    return dom.window.document.body.innerHTML;
};

/** Generates a snippet from the Google Doc from the first contentful paragraph */
export const getSnippet = (dom: JSDOM, maxChars: number): string => {
    let snippet = "";
    // find the first paragraph with content
    let paragraph = findElementsWithMatcher(
        dom,
        "p",
        (p) => !!p.textContent?.trim(),
    )?.[0];
    // if no results, return empty string
    if (!paragraph) return snippet;
    // if the first paragraph didn't have enough text, go to the next element until it does have enough
    while (snippet.length < maxChars) {
        snippet += paragraph.textContent + "\n";
        const next = findNextSiblingWithContent(paragraph);
        if (!next) break;
        paragraph = next;
    }
    // if there's too many characters, use elipsis
    if (snippet.length > maxChars) snippet = snippet.slice(0, maxChars) + "...";
    // remove trailing/leading spaces
    return snippet.trim();
};

/** Extracts the text from the first heading element */
export const extractTitle = (dom: JSDOM): string => {
    const h = dom.window.document.querySelector("h1");
    h?.remove();
    return h?.textContent ?? "";
};

/** Gets an image with no prior content, removes it, and returns its source */
export const extractCoverImage = (dom: JSDOM): string => {
    const p = findElementsWithMatcher(dom, "p", (p: HTMLParagraphElement) => {
        return !findPriorSiblingWithContent(p) && !!p.querySelector("img");
    })?.[0];
    const img = p?.querySelector("img");
    img?.remove();
    return img?.src ?? "";
};

/** Gets the paragraph immediately after h1, removes it and returns its text */
export const extractDescription = (dom: JSDOM): string => {
    const p = dom.window.document.querySelector("h1 + p");
    p?.remove();
    return p?.textContent ?? "";
};

export const replaceImageSrcBase64 = async (dom: JSDOM): Promise<void> => {
    const images = dom.window.document.querySelectorAll("img");
    for (const img of images) {
        if (!img.src) break;
        try {
            const base64 = await toBase64(img.src);
            img.src = `data:image/jpeg;base64,${base64}`;
        } catch (err) {
            console.error(
                `Failed to download image ${img.src}, try again later`,
            );
        }
    }
};
