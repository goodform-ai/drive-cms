import { JSDOM } from "jsdom";

import { config } from "./config";

/** Extracts the link URL from Google Docs links
 *
 * Links from the HTML generated by google docs use the format `https://google.com/url?q=<your link>&...`
 *
 * The link you actually want is in the `q` query parameter
 *
 * If `docsHref` does not exist or is not a valid URL, this will return the input value unchanged.
 *
 * @param {string} docsHref The URL from the Google Doc Link href
 * @returns {string}
 */
export const extractLinkUrl = (docsHref = ""): string => {
    try {
        const urlObj = new URL(docsHref);
        const redirectUrl = urlObj.searchParams.get("q");
        return redirectUrl ?? docsHref;
    } catch (err) {
        return docsHref;
    }
};

/** Replaces link hrefs from google docs with the correct url */
export const replaceGoogleHrefs = (dom: JSDOM): void => {
    const linkElements = dom.window.document.querySelectorAll("a");
    linkElements.forEach((a) => a.href && (a.href = extractLinkUrl(a.href)));
};

/** Removes inline styles applied to elements in exported Google Docs
 * @param {JSDOM} dom JSDOM instance
 * @returns {void}
 */
export const removeDocumentStyles = (dom: JSDOM): void => {
    dom.window.document
        .querySelectorAll("*")
        .forEach((element) => element.removeAttribute("style"));
};

/** Removes any links or spans with no content */
export const removeEmptySpans = (dom: JSDOM): void => {
    dom.window.document
        .querySelectorAll("a, span")
        .forEach((span) => !span.textContent?.trim() && span.remove());
};

/** Replace empty `p` tags with `br` tags */
export const replaceEmptyPara = (dom: JSDOM): void => {
    dom.window.document.querySelectorAll("p").forEach((p) => {
        if (p.textContent?.trim()) return;
        const br = dom.window.document.createElement("br");
        p.parentNode?.replaceChild(br, p);
    });
};

/** Removes the metadata table and returns its values.
 *
 * Searches for a metadata table by the text content in its `thead` element. By default, this is "metadata"
 *
 * In Google Docs, you can make a row a header by pinning the first row in a table.
 *
 * If you do not have a matching table, metadata will be an empty object.
 *
 * @param {JSDOM} dom JSDOM Instance
 * @param {string} [metaFlag] string to search for in the `thead` element.
 * @returns Object with metadata keys and values
 */
export const extractTableMetadata = (
    dom: JSDOM,
    metaFlag: string = config.METADATA_FLAG,
) => {
    const metadata: { [key: string]: string } = {};
    const tables = Array.from(dom.window.document.querySelectorAll("table"));
    const metaTable = tables.find((table) =>
        table.tHead?.textContent?.includes(metaFlag),
    );

    if (!metaTable) return metadata;

    const rows = metaTable.querySelectorAll("tr");
    rows.forEach((row) => {
        const [key, value] = Array.from(row.getElementsByTagName("td")).map(
            (cell) => cell.textContent,
        );
        if (typeof key !== "string" || typeof value !== "string") return;
        metadata[key] = value;
    });

    metaTable.remove();
    return metadata;
};

/** Extracts only the contents of the JSDOM's body tag */
export const extractDocumentHtml = (dom: JSDOM): string => {
    return dom.window.document.body.innerHTML;
};

export interface PrepareHtmlOptions {
    /** Whether to keep inline styles */
    keepStyles?: boolean;
    /** Whether to keep empty `a`, `span` elements */
    keepEmptyText?: boolean;
    /** Whether to keep empty `p` elements with `br` */
    keepEmptyPara?: boolean;
    /** Whether to keep Google links */
    keepGoogleLinks?: boolean;
    /** whether to ignore metadata */
    ignoreMeta?: boolean;
    /** Which flag to use find the metadata table */
    metaFlag?: string;
}

export interface DriveDocument {
    content: string;
    meta: { [key: string]: string };
}

export const prepareDocument = (
    html: string,
    {
        keepStyles = false,
        keepEmptyText = false,
        keepEmptyPara = false,
        keepGoogleLinks = false,
        ignoreMeta = false,
        metaFlag,
    }: PrepareHtmlOptions = {},
): DriveDocument => {
    let meta: { [key: string]: string } = {};
    const dom = new JSDOM(html);
    if (!keepStyles) removeDocumentStyles(dom);
    if (!keepEmptyText) removeEmptySpans(dom);
    if (!keepEmptyPara) replaceEmptyPara(dom);
    if (!keepGoogleLinks) replaceGoogleHrefs(dom);
    if (!ignoreMeta) meta = extractTableMetadata(dom, metaFlag);
    const content = extractDocumentHtml(dom);

    return { content, meta };
};
